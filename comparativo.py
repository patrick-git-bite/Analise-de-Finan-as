"""
Sistema Principal de An√°lise Financeira
Vers√£o melhorada com arquitetura modular, tratamento de erros e funcionalidades avan√ßadas
"""

import sys
import os
from pathlib import Path
import argparse
from typing import Optional

# Importar m√≥dulos locais
from config import CONFIG, validate_config
from utils import setup_logging, open_file_system_specific, create_backup
from data_processor import FinancialDataProcessor
from chart_generator import ChartGenerator

class FinancialAnalyzer:
    """Classe principal para an√°lise financeira"""
    
    def __init__(self, config_override: Optional[dict] = None):
        """Inicializa o analisador financeiro"""
        # Configura√ß√£o
        self.config = CONFIG.copy()
        if config_override:
            self.config.update(config_override)
        
        # Validar configura√ß√£o
        validate_config()
        
        # Setup logging
        self.logger = setup_logging()
        
        # Inicializar componentes
        self.data_processor = FinancialDataProcessor(self.config)
        self.chart_generator = ChartGenerator(self.config)
        
        self.logger.info("Financial Analyzer inicializado com sucesso")
    
    def run_analysis(self, input_file: Optional[str] = None, 
                    sheet_name: Optional[str] = None,
                    output_xlsx: Optional[str] = None,
                    output_pdf: Optional[str] = None) -> bool:
        """Executa an√°lise completa"""
        try:
            # Usar configura√ß√µes padr√£o se n√£o fornecidas
            input_file = input_file or self.config["input_file"]
            sheet_name = sheet_name or self.config["sheet_name"]
            output_xlsx = output_xlsx or self.config["output_xlsx"]
            output_pdf = output_pdf or self.config["output_pdf"]
            
            self.logger.info(f"Iniciando an√°lise de {input_file}")
            
            # Criar backups se os arquivos de sa√≠da j√° existirem
            create_backup(output_xlsx)
            create_backup(output_pdf)
            
            # 1. Processar dados
            self.logger.info("Etapa 1: Processamento de dados")
            df = self.data_processor.process_complete_pipeline(input_file, sheet_name)
            
            if df.empty:
                raise ValueError("Nenhum dado v√°lido encontrado ap√≥s processamento")
            
            # 2. Gerar estat√≠sticas
            self.logger.info("Etapa 2: Gera√ß√£o de estat√≠sticas")
            summary_stats = self.data_processor.get_summary_statistics(df)
            self._print_summary(summary_stats)
            
            # 3. Salvar planilha Excel
            self.logger.info("Etapa 3: Salvamento da planilha Excel")
            if not self.data_processor.save_excel(df, output_xlsx):
                self.logger.warning("Falha ao salvar arquivo Excel")
            
            # 4. Gerar relat√≥rio PDF
            self.logger.info("Etapa 4: Gera√ß√£o do relat√≥rio PDF")
            if not self.chart_generator.generate_complete_report(df, output_pdf):
                self.logger.warning("Falha ao gerar relat√≥rio PDF")
            
            # 5. Abrir arquivos (opcional)
            self.logger.info("Etapa 5: Abertura dos arquivos gerados")
            if os.path.exists(output_xlsx):
                open_file_system_specific(output_xlsx)
            if os.path.exists(output_pdf):
                open_file_system_specific(output_pdf)
            
            self.logger.info("‚úÖ An√°lise conclu√≠da com sucesso!")
            return True
            
        except Exception as e:
            self.logger.error(f"‚ùå Erro durante a an√°lise: {e}")
            return False
    
    def _print_summary(self, summary_stats: dict) -> None:
        """Imprime resumo das estat√≠sticas"""
        print("\n" + "="*60)
        print("RESUMO DA AN√ÅLISE FINANCEIRA")
        print("="*60)
        print(f"üìä Total de contas analisadas: {summary_stats.get('total_accounts', 0):,}")
        print(f"üí∞ Total 2024: R$ {summary_stats.get('total_2024', 0):,.2f}")
        print(f"üí∞ Total 2025: R$ {summary_stats.get('total_2025', 0):,.2f}")
        print(f"üìà Diferen√ßa total: R$ {summary_stats.get('total_difference', 0):,.2f}")
        print(f"üìä Crescimento m√©dio: {summary_stats.get('average_growth', 0):.2f}%")
        print(f"‚úÖ Varia√ß√µes positivas: {summary_stats.get('positive_variations', 0)}")
        print(f"‚ùå Varia√ß√µes negativas: {summary_stats.get('negative_variations', 0)}")
        print(f"‚ûñ Varia√ß√µes est√°veis: {summary_stats.get('stable_variations', 0)}")
        
        if summary_stats.get('max_growth_account'):
            print(f"üèÜ Maior crescimento: {summary_stats['max_growth_account']} "
                  f"({summary_stats.get('max_growth_percentage', 0):.2f}%)")
        
        if summary_stats.get('max_decline_account'):
            print(f"‚ö†Ô∏è  Maior decl√≠nio: {summary_stats['max_decline_account']} "
                  f"({summary_stats.get('max_decline_percentage', 0):.2f}%)")
        
        print("="*60 + "\n")
    
    def validate_input_file(self, filepath: str) -> bool:
        """Valida se o arquivo de entrada existe e √© v√°lido"""
        try:
            if not os.path.exists(filepath):
                self.logger.error(f"Arquivo n√£o encontrado: {filepath}")
                return False
            
            # Verificar se √© um arquivo Excel
            if not filepath.lower().endswith(('.xlsx', '.xls')):
                self.logger.error("Arquivo deve ser uma planilha Excel (.xlsx ou .xls)")
                return False
            
            return True
            
        except Exception as e:
            self.logger.error(f"Erro na valida√ß√£o do arquivo: {e}")
            return False

def main():
    """Fun√ß√£o principal com interface de linha de comando"""
    parser = argparse.ArgumentParser(
        description="Sistema de An√°lise Financeira Comparativa",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
Exemplos de uso:
  python main.py                                    # Usar configura√ß√µes padr√£o
  python main.py -i dados.xlsx -s Planilha1        # Especificar arquivo e aba
  python main.py -o relatorio.xlsx -p graficos.pdf # Especificar arquivos de sa√≠da
  python main.py --validate                        # Apenas validar arquivo de entrada
        """
    )
    
    parser.add_argument('-i', '--input', 
                       help=f'Arquivo Excel de entrada (padr√£o: {CONFIG["input_file"]})')
    parser.add_argument('-s', '--sheet', 
                       help=f'Nome da aba (padr√£o: {CONFIG["sheet_name"]})')
    parser.add_argument('-o', '--output-xlsx', 
                       help=f'Arquivo Excel de sa√≠da (padr√£o: {CONFIG["output_xlsx"]})')
    parser.add_argument('-p', '--output-pdf', 
                       help=f'Arquivo PDF de sa√≠da (padr√£o: {CONFIG["output_pdf"]})')
    parser.add_argument('--validate', action='store_true',
                       help='Apenas validar o arquivo de entrada')
    parser.add_argument('--no-open', action='store_true',
                       help='N√£o abrir arquivos automaticamente')
    parser.add_argument('--log-level', choices=['DEBUG', 'INFO', 'WARNING', 'ERROR'],
                       default='INFO', help='N√≠vel de log (padr√£o: INFO)')
    
    args = parser.parse_args()
    
    try:
        # Configurar logging com n√≠vel especificado
        logger = setup_logging(args.log_level)
        
        # Criar inst√¢ncia do analisador
        config_override = {}
        if args.no_open:
            config_override['auto_open'] = False
        
        analyzer = FinancialAnalyzer(config_override)
        
        # Obter par√¢metros
        input_file = args.input or CONFIG["input_file"]
        
        # Valida√ß√£o apenas
        if args.validate:
            if analyzer.validate_input_file(input_file):
                print(f"‚úÖ Arquivo {input_file} √© v√°lido")
                return 0
            else:
                print(f"‚ùå Arquivo {input_file} n√£o √© v√°lido")
                return 1
        
        # Executar an√°lise completa
        success = analyzer.run_analysis(
            input_file=args.input,
            sheet_name=args.sheet,
            output_xlsx=args.output_xlsx,
            output_pdf=args.output_pdf
        )
        
        return 0 if success else 1
        
    except KeyboardInterrupt:
        print("\n‚ö†Ô∏è  Opera√ß√£o cancelada pelo usu√°rio")
        return 1
    except Exception as e:
        print(f"‚ùå Erro cr√≠tico: {e}")
        return 1

if __name__ == "__main__":
    sys.exit(main())